/**********************************************************************
 *  README
 **********************************************************************/

Name: Dhesant Jogi Nakka  
Nickname or English name: Dhesant
Major: ECE
Course: COMP2012H
Email address: djnakka@connect.ust.hk
Programming assignment #: 2
OS: Ubuntu 14.04
Compiler: g++ 4.8.4
Hours spent: ~4 (Can't remember)

/**********************************************************************
 *  List of included files
 **********************************************************************/
permutation.cpp	(Main source file)
Makefile  	(Makefile)
README	        (Readme - this file)

/**********************************************************************
 *  Compilation Instructions
 **********************************************************************/
The program can be compiled with the command "g++ -o permutation permutation.cpp" or the Makefile, which outputs to the executable "permutation"

/**********************************************************************
 * Program sections that have been implemented
 **********************************************************************/
The program implements the following sections;
 - Permutation function for n distinct elements
 - Removal of duplicates from the resulting array

/**********************************************************************
 *  List whatever help (if any) that you received.
 **********************************************************************/
I have sought help from the following people: N/A
I have read the following books: N/A
I have consulted the following websites: www.cplusplus.com (for syntax of standard libraries)

The work included in this program is all my own work (Y/N): Y

/**********************************************************************
 *  Explain your overall approach and the unique features of your program
 **********************************************************************/
The program first calculate all the possible permutations of the input sequence using a recursive swap algorithm, where swaps all the values preceding the current depth of the algorithm, then calls itself with a higher depth, resulting in a highly recursive function that gives all the permutations of the input sequence. Then, a remove duplicate function is called to compare all values of the resulting vector of permutations against itself, to remove all identical values.

/**********************************************************************
 *  Describe any serious problems your program has, or anything which
 *  you have not implemented successfully
 **********************************************************************/
The program uses an inefficient approach to generating the permutations. By checking for duplicates after calculating all possible permutations, a lot of time is wasted to both calculate idential permutations. In addition, the duplicate algorithm is also not the most effective, requiring two levels of iteration over all the possible permutations.

/**********************************************************************
 *  State the input files you used to test your program
 **********************************************************************/
None, test input structure provided at https://course.cse.ust.hk/comp2012h/csd_only/assignments/PA2-Function/Permutation.htm


/**********************************************************************
 *  Known bugs / limitations of the program
 **********************************************************************/
The program takes a long time to process input sequences above 7 characters long, because for every increase in length, the number of permutations increases exponentially, taking more computational time to process.


/**********************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, whether    
 *  you like the assignment or not, and how the assignment may be
 *  improved 
 **********************************************************************/
